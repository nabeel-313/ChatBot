from Chatbot.config import Config
from Chatbot.exception import ChatException
from Chatbot.logger import logging
from Chatbot.utils.main_utils import load_google_LLM, prompt_template, callback_call
from langchain.agents import AgentExecutor, create_tool_calling_agent
from langchain_core.runnables import RunnableConfig
from tools.tools import *
import sys
from dotenv import load_dotenv, find_dotenv
from langchain.chains import ConversationChain
from langchain.memory import ConversationSummaryBufferMemory

load_dotenv(find_dotenv(), override=True)

#list of tools
tools = [google_search_tool,weather_info_tool,convert_c_to_f,live_cricket_score]

def create_tool_agent():
    agent = create_tool_calling_agent(
        llm = load_google_LLM(),
        tools = tools,
        prompt = prompt_template()
    )
    return agent
    
def generate_response(user_message):
    """
Processes the user input and returns the LLM response.

:param user_input: str
    The query provided by the user.
:return: str
    The response generated by the LLM for the given query.
:raises Exception:
    If the function encounters an error during execution.
:description:
    This function takes user input, processes it, and returns the output
    generated by the LLM for the query. In case of failure, it raises an exception.
"""
    try:
        logging.info(f"Answering the User message {user_message}")
        load_dotenv(find_dotenv(), override=True)
        llm = load_google_LLM()
        prompt = prompt_template()
        memory = ConversationSummaryBufferMemory(
            llm = llm,
            max_token_limit=Config.MAX_TOKEN
        )
        agent_executor = AgentExecutor(
                            agent=create_tool_agent(),
                            tools=tools,
                            memory=memory
        )
        config = RunnableConfig(callbacks=callback_call())
        response = agent_executor.invoke(
                            {"input": user_message },
                             config=config
                            )
        
        #print(response)
        return response
    except Exception as e:
        raise ChatException(e,sys)
